#!/bin/sh
# ACQ2006B_TOP_01_01_ff_ff_ff_ff

if [ -e /mnt/local/fmc-scan.conf ]; then
	echo +++ fmc-scan using /mnt/local/fmc-scan.conf
	source /mnt/local/fmc-scan.conf
fi
if [ "$FMC_SCAN_FPGA" = "" ]; then
	echo ERROR: FMC_SCAN_FPGA not set
	exit 1
fi
if [ "$FMC_SCAN_SITES" = "" ]; then
	echo ERROR: FMC_SCAN_SITES not set
	exit 1
fi

mounted_up=0
for img in /mnt/ko/*fpga*.img; do
	if [ -e $img ]; then
		if [ $mounted_up -eq 0 ]; then
			mount $img /mnt/fpga.d
			if [ $? -eq 0 ]; then
				echo +++ mounted fpga stock $img at /mnt/fpga.d
				mounted_up=1
			else
				echo +++ ERROR: failed to mount fpga stock
			fi
		else
			echo +++ WARNING: multiple fpga stock images found
		fi
	fi
done

scan_done=/var/run/fmc-scan-done
if [ -e $scan_done ]; then
	echo  $scan_done exists, looks like the scan has already completed
	exit 0
fi
mkdir -p /dev/sites

let module_count=0

all_sites=""

for PRD in /dev/gpio/*present
do
	_PRDx=${PRD#/dev/gpio/fmc}
	if [ "$_PRDx" = "$PRD" ]; then
		_PRDx=${PRD#/dev/gpio/pmod}				
	fi
	if [ "$_PRDx" = "$PRD" ]; then
		echo ERROR $PRD not supported
		exit 1
	fi
	site=${_PRDx%_present}
	if [ $(cat $PRD) -ne 0 ]; then
		# PMODS are faked .. don't try make them again0
		if [ ! -e /dev/sites/$site ]; then  
			mkdir /dev/sites/$site
			let BUS=$site+1
			# mtca shim puts the eeprom at non-standard address
			for ba in 0050 0051 0052
			do
				eeprom=/sys/bus/i2c/devices/${BUS}-${ba}/eeprom
				if [ -e ${eeprom} ]; then
					ln -s ${eeprom} /dev/sites/$site
					break
				fi
			done
#			set.sys /dev/gpio/LED/FMC${site}_R 1
			all_sites="$all_sites $site"
		fi
		let module_count=$module_count+1	
	fi
done

SITES=""
GOOD_SITES=""

aappend() {
	if [ -z $2 ]; then
		echo $1
	else
		echo $1,$2
	fi
}

get_fpga_spec() {
#generated from filename   : ACQ2006_TOP_02_02_ff_ff_ff_40
	xiloader $* 2>&1 | grep generated | awk '{ print $5 }' | sed -e 's/KMCUA/KMCU/'
}

let site_count=0
MTYPES=""

#acq2006_006> cat /dev/sites/5/details 
#FRU_MAN="D-TACQ Solutions"
#FRU_PROD_NAME="AO421ELF"
#FRU_SERIAL="E42100001"
#FRU_PART_NUM="AO421ELF"
# and the new ones
#M=f0
#N=40

decode_fru_success=0


decode_fru() {
	
	site=$1
	details=$2
	sdir=/etc/acq400/$site
	
	mkdir -p $sdir
	echo -n "++ decode FRU EEPROM site $site "

	FRU_MAN=xx
	FRU_PROD_NAME=xx
	FRU_SERIAL=xx
	FRU_PART_NUM=xx
	FRU_MTYPE=xx
	FRU_NCHAN=xx
	M=x
	N=x		
		
	nchan=4
	source $details
	mn=$(echo $FRU_PART_NUM | cut -d\  -f 2-  )
	if [ "$mn" != "$FRU_PART_NUM" ]; then
#		echo FRU_PART_NUM \"$FRU_PART_NUM\" \"$mn\"
		eval $mn
	fi
	
	if [ "$N" = "x" -o "M" = "x" ]; then
		decode_fru_success=0
		echo ERROR: obsolete EEPROM please contact D-TACQ for update
		return		
	fi
	
	echo $N > $sdir/NCHAN
	echo $M > $sdir/MTYPE
	echo $FRU_SERIAL > $sdir/SERIAL
	echo "$FRU_MAN" > $sdir/MANUFACTURER	
	echo $FRU_PART_NUM > $sdir/PART_NUM	

	_IFS=$IFS
	IFS='-'
	let ii=0
	for field in $FRU_PART_NUM
	do
#		echo decode FRU_PART_NUM: $FRU_PART_NUM: ii $ii field $field
		case $ii in
		0) [ -e $sdir/MODEL ] || echo $field > $sdir/MODEL;;
		1) nchan=$(echo $field | sed -e 's/[^0-9]//g')		
		   [ -e $sdir/NCHAN ] || echo $nchan  > $sdir/NCHAN;;
		2) echo $field > $sdir/MAXRATE;;
		3) echo $field > $sdir/RESOLUTION;;
		esac
		let ii=$ii+1
		if [ $ii -eq 2 -a "$M" != "01" ]; then
			# next fields valid ACQ420 only
			break;
		fi
	done
	IFS=$_IFS			

	grep -q FRU_PROD_NAME $details
	if [ $? -eq 0 ]; then
		decode_fru_success=1
		echo OK;
	else
		echo FAIL;
	fi

	chmod 444 ${sdir}/*
}

good_sites=""

for sd in /dev/sites/?
do
	if [ -d $sd ]; then
		site=$(basename $sd)
		SITES=$(aappend $SITES $site)
		fru-dump-acq ${sd}/eeprom > ${sd}/details
	
		decode_fru_success=0
		decode_fru $site ${sd}/details
		if [ $decode_fru_success -ne 0 ]; then
			GOOD_SITES=$(aappend $GOOD_SITES $site)
			good_sites="$good_sites $site"
		fi
	fi
done

#echo SITES \"$SITES\"
#echo GOOD_SITES \"$GOOD_SITES\"
#echo good_sites \"$good_sites\"


get_mtype()
{
	if [ -e /etc/acq400/$1/MTYPE ]; then
		cat /etc/acq400/$1/MTYPE
	else
		echo ff
	fi
}

is_gzip_file() {
	echo $1 | grep -q \.gz$
}

ideal_fpga=${FMC_SCAN_FPGA}_TOP
for site in $FMC_SCAN_SITES
do
	mt=$(get_mtype $site)
	ideal_fpga="${ideal_fpga}_${mt}"	
done

if [ ! -z $COMMS_SITE ]; then
    comms=$(get_mtype $COMMS_SITE)
    fglob="${ideal_fpga}*${comms}" 
    ideal_fpga="${ideal_fpga}_${comms}"
else
	fglob=${ideal_fpga}
fi


fpga_image_good=""

get_fspec() {
	if [ -r $1 ]; then
		fn=$(basename ${1})
		fspec=${fn%%.*}
		echo $fspec
	fi
}

get_fspec_internal() {
	if [ -r $1 ]; then
		is_gzip_file $1
		if [ $? -eq 0 ]; then
			fspec=$(gunzip -c $1 | get_fpga_spec -i -)
		else
			fspec=$(get_fpga_spec $1)
		fi
		echo $fspec
	fi
}
compatible_bit() {
	fspec=$1
	if [ "x$fspec" != "x" ]; then
		is_compatible_bitfile $ideal_fpga $fspec quiet
		if [ $? -eq 0 ]; then
			echo +++ compatible bitfile $fspec
			fpga_image_good=$1
		fi
	fi		
}

identical_bit() {
	fspec=$1
	if [ "x$fspec" != "x" ]; then
		is_identical_bitfile $ideal_fpga $fspec quiet
		if [ $? -eq 0 ]; then
			echo +++ identical bitfile
			fpga_image_good=$1
		fi
	fi
}

FPGA_STATUS=/tmp/fpga_status

fpga_check() {
	basename $(grep loaded /tmp/fpga_status | awk '{ print $3 }') .bit.gz
        grep date $FPGA_STATUS |  awk '{print $3}'
}

load_fpga() {
	fpga_image_good=$1
	echo load FPGA $fpga_image_good
	echo load.fpga loaded $fpga_image_good >$FPGA_STATUS
	[ "x$NOLOAD" != "x" ] && return
	gunzip -c $fpga_image_good | /bin/xiloader -L 2>>$FPGA_STATUS
	echo $(fpga_check) > /etc/acq400/0/fpga_version
	if [ $? -ne 0 ]; then
		echo "ERROR FPGA load failed launch emergency shell"
		/bin/sh
	fi	
}

select_fpga() {
		filter=$1;shift
		for fn in $(ls $* 2>/dev/null | sed -e 's/.bit.gz//' | sort)
		do
			file=${fn}.bit.gz
			if [ -e $file ]; then
				$filter $(get_fspec $file)
				if [ "x$fpga_image_good" != "x" ]; then
					echo +++ Internal name consistency check
					fsi=$(get_fspec_internal $file)
					fpga_image_good=""
					compatible_bit $fsi
					if [ "x$fpga_image_good" != "x" ]; then
						load_fpga $file
						break
					else
						echo ERROR: selected $file but file name does not match internal $fsi
						echo "ERROR FPGA load failed launch emergency shell"
						/bin/sh	
					fi
				fi
			fi
		done
}

loaded() {
	if [ "x$fpga_image_good" = "x" -a $module_count != 0 ]; then
		echo 
	else
		echo 1
	fi
}

wildglob=$(echo $fglob | sed -e 's/ff/??/g')

if [ "x$SITES" = "x$GOOD_SITES" ]; then
	[ $PREF_BIT ] && select_fpga compatible_bit $PREF_BIT
	[ $(loaded) ] || select_fpga identical_bit  /mnt/${fglob}*.bit.gz
	[ $(loaded) ] || select_fpga compatible_bit /mnt/${wildglob}*.bit.gz
	[ $(loaded) ] || select_fpga identical_bit  /mnt/fpga.d/${fglob}*.bit.gz
	[ $(loaded) ] || select_fpga compatible_bit /mnt/fpga.d/${fglob}*.bit.gz
	[ $(loaded) ] || select_fpga compatible_bit /mnt/fpga.d/${wildglob}*.bit.gz
fi
if [ "$fpga_image_good" = "" ]; then
	echo ERROR: no valid FPGA image found, FPGA NOT LOADED
	for site in $all_sites
	do
		set.sys /dev/gpio/LED/FMC${site}_R 1
	done
	exit	
fi 

for site in $good_sites
do	
#	set.sys /dev/gpio/LED/FMC${site}_R 0
	set.sys /dev/gpio/LED/FMC${site}_G 1
	let site_count=$site_count+1
done

echo "sites=$SITES" > /etc/sites
echo "good_sites=$GOOD_SITES" >>/etc/sites

source /etc/sites

get_model_code() {
    model=$(cat /etc/acq400/$1/MODEL)
    if [ "${model#DIO*}" != "${model}" ]; then
    	echo dio
    elif [ "${model#AO*}" != "${model}" ]; then
    	echo ao
    else
    	echo ${model} | tr -d [A-Za-z] | awk '{ print $1 }'
    fi
}



SITELIST=$(get_model_code 0 | tr -d 0)
if [ "$SITELIST" = "21637" ]; then
	SITELIST=237
fi

for site in $(echo $sites | tr ,C \  )
do
	SITELIST="${SITELIST},${site}=$(get_model_code $site)"	
done

echo "$SITELIST" >/etc/acq400/0/SITELIST
echo "$SL2" >/etc/acq400/0/SL2

if [ "x$sites" = "x$good_sites" ]; then
	echo ++ Sites populated: $site_count ALL GOOD
else
    [ "x$good_sites" = "x" ] && good_sites=NONE
	echo ++ Sites populated: $site_count WARNING: FOUND:$sites GOOD:$good_sites
fi

clean_release_report

echo done > $scan_done

